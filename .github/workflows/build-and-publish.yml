name: Build and publish binaries

on:
  push:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: write

env:
  BUILD_BRANCH: builds

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system deps (tkinter)
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pyinstaller

      - name: Build Linux binary
        run: |
          pyinstaller --onefile --windowed slideshow.py
          mkdir -p build_out/linux
          TS=$(date +%Y%m%d-%H%M%S)
          SHORT_SHA=${GITHUB_SHA::7}
          cp dist/slideshow "build_out/linux/slideshow-${TS}-${SHORT_SHA}"

      - name: Upload artifact (linux)
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: build_out/linux/*

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if (Test-Path requirements.txt) { pip install -r requirements.txt }
          pip install pyinstaller
        shell: pwsh

      - name: Build Windows exe
        shell: pwsh
        run: |
          pyinstaller --onefile --windowed slideshow.py
          New-Item -ItemType Directory -Force -Path build_out/windows | Out-Null
          $ts = Get-Date -Format 'yyyyMMdd-HHmmss'
          $short = $env:GITHUB_SHA.Substring(0,7)
          Copy-Item dist/slideshow.exe "build_out/windows/slideshow-$ts-$short.exe"

      - name: Upload artifact (windows)
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: build_out/windows/*

  publish-builds:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]
    env:
      SRC_SHA: ${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare builds branch
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          # Create/switch to builds branch
          if git ls-remote --exit-code --heads origin "${BUILD_BRANCH}"; then
            git fetch origin "${BUILD_BRANCH}"
            git checkout "${BUILD_BRANCH}"
          else
            git checkout --orphan "${BUILD_BRANCH}"
            rm -rf *
            echo "# Builds branch" > README.md
            git add README.md
            git commit -m "Initialize builds branch"
          fi

      - name: Publish new builds and prune to last 3
        run: |
          set -e
          mkdir -p windows linux
          # Copy artifacts into platform folders
          if [ -d artifacts/linux ]; then
            cp artifacts/linux/* linux/ || true
          fi
          if [ -d artifacts/windows ]; then
            cp artifacts/windows/* windows/ || true
          fi
          # Keep only the last 3 (by mtime) per platform
          ls -1t linux 2>/dev/null | tail -n +4 | xargs -r -I{} rm -f "linux/{}"
          ls -1t windows 2>/dev/null | tail -n +4 | xargs -r -I{} rm -f "windows/{}"
          git add linux windows
          TS=$(date +%Y%m%d-%H%M%S)
          SHORT_SHA=${SRC_SHA:0:7}
          git commit -m "Publish build ${TS} (${SHORT_SHA})" || echo "No changes to commit"
          git push origin "${BUILD_BRANCH}"
